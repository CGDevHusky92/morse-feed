From 59c6970a2fbea697f17faa4a292efd31d2d113ce Mon Sep 17 00:00:00 2001
Subject: [PATCH] Switch morse mac.c from .chandef to .chanreq plus smaller
 fixes

--- morse_driver-rel_1_12_3_2024_May_23.orig/mac.c	2024-10-03 08:18:35.000000000 +0000
+++ morse_driver-rel_1_12_3_2024_May_23.orig/mac.c	2025-01-27 03:19:34.376165864 +0000
@@ -965,7 +965,7 @@
 	info->flags |= IEEE80211_TX_STAT_TX_FILTERED;
 	info->flags &= ~IEEE80211_TX_CTL_AMPDU;

-	ieee80211_tx_status(mors->hw, skb);
+	ieee80211_tx_status_ni(mors->hw, skb);
 	return true;
 }

@@ -2245,7 +2245,7 @@
 	return 0;
 }

-static void morse_mac_ops_stop(struct ieee80211_hw *hw)
+static void morse_mac_ops_stop(struct ieee80211_hw *hw, bool link_shutdown)
 {
 	struct morse *mors = hw->priv;
 	struct morse_vif *mon_if = &mors->mon_if;
@@ -2380,7 +2380,7 @@
 	MORSE_ECSA_INFO(mors, "%s: chswitch timer TS=%ld\n", __func__, jiffies);

 	if (vif->type == NL80211_IFTYPE_AP)
-		ieee80211_csa_finish(vif);
+		ieee80211_csa_finish(vif, 0);
 }

 static void morse_ecsa_chswitch_work(struct work_struct *work)
@@ -3252,16 +3252,20 @@
 /* Return Tx power only when channel is configured and is the same as one in hw->conf */
 static int morse_mac_ops_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif, int *dbm)
 {
-	int err;
+	int err = 0;
 	struct morse *mors = hw->priv;
 	struct ieee80211_chanctx_conf *chanctx_conf;

+	struct ieee80211_bss_conf *c = rcu_dereference(vif->link_conf[0]);
+	if (!c)
+		c = &vif->bss_conf;
+
 	/* Refer ieee80211_cfg_get_channel() */
 	chanctx_conf = morse_mac_get_chantx_conf(vif);

 	err = !chanctx_conf;

-	if (err || !cfg80211_chandef_identical(&vif->bss_conf.chandef, &hw->conf.chandef))
+	if (err || !cfg80211_chandef_identical(&c->chanreq.oper, &hw->conf.chandef))
 		return -ENODATA;

 	mutex_lock(&mors->lock);
@@ -4488,8 +4492,11 @@
 static int morse_mac_join_ibss(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 {
 	struct morse *mors = hw->priv;
+	struct ieee80211_bss_conf *c = rcu_dereference(vif->link_conf[0]);
+	if (!c)
+		c = &vif->bss_conf;
 	const struct morse_dot11ah_channel *chan_s1g =
-	    morse_dot11ah_channel_chandef_to_s1g(&vif->bss_conf.chandef);
+	    morse_dot11ah_channel_chandef_to_s1g(&c->chanreq.oper);
 	struct morse_vif *mors_vif = (struct morse_vif *)vif->drv_priv;
 	u8 bssid[ETH_ALEN], fc_bss_bw_subfield = 0;
 	bool ibss_creator = morse_mac_is_ibss_creator(vif);
@@ -4515,8 +4522,8 @@
 #endif
 		   vif->bss_conf.bssid,
 		   vif->addr,
-		   vif->bss_conf.chandef.chan->hw_value,
-		   vif->bss_conf.chandef.chan->center_freq,
+		   c->chanreq.oper.chan->hw_value,
+		   c->chanreq.oper.chan->center_freq,
 		   chan_s1g ? chan_s1g->ch.hw_value : -1,
 		   chan_s1g ? ieee80211_channel_to_khz(&chan_s1g->ch) : -1,
 		   op_bw_mhz,
@@ -4698,6 +4717,12 @@
 	.bss_info_changed = morse_mac_ops_bss_info_changed,
 	.prepare_multicast = morse_mac_ops_prepare_multicast,
 	.configure_filter = morse_mac_ops_configure_filter,
+#if KERNEL_VERSION(5, 9, 0) <= MAC80211_VERSION_CODE
+	.wake_tx_queue = morse_mac_ops_wake_tx_queue,
+	.add_chanctx = ieee80211_emulate_add_chanctx,
+	.remove_chanctx = ieee80211_emulate_remove_chanctx,
+	.change_chanctx = ieee80211_emulate_change_chanctx,
+#endif
 	.sw_scan_start = morse_mac_ops_sw_scan_start,
 	.sw_scan_complete = morse_mac_ops_sw_scan_complete,
 	.conf_tx = morse_mac_ops_conf_tx,
@@ -4791,7 +4798,7 @@
 	info = IEEE80211_SKB_CB(skb);
 	info->control.vif = vif;
 	info->flags |= IEEE80211_TX_STAT_TX_FILTERED;
-	ieee80211_tx_status(mors->hw, skb);
+	ieee80211_tx_status_ni(mors->hw, skb);

 	return 0;

@@ -5075,7 +5082,7 @@

 	if (morse_mac_is_csa_active(vif) && morse_mac_is_s1g_long_beacon(mors, skb)) {
 #if KERNEL_VERSION(5, 10, 0) < MAC80211_VERSION_CODE
-		if (ieee80211_beacon_cntdwn_is_complete(vif)) {
+		if (ieee80211_beacon_cntdwn_is_complete(vif,0)) {
 #else
 		if (ieee80211_csa_is_complete(vif)) {
 #endif
@@ -6506,17 +6506,14 @@
 	struct ieee80211_hw *hw;
 	struct morse *mors;

-#if KERNEL_VERSION(5, 9, 0) <= MAC80211_VERSION_CODE
+#if KERNEL_VERSION(6, 2, 0) <= MAC80211_VERSION_CODE
 	if (enable_airtime_fairness)
 		mors_ops.wake_tx_queue = morse_mac_ops_wake_tx_queue;
-#endif
-#if KERNEL_VERSION(6, 2, 0) <= MAC80211_VERSION_CODE
-	/* mac80211 has dropped support for TX push path and has fully switched over to the
-	 * internal TX queue (iTXQ) implementation, hence wake_tx_queue() callback is now
-	 * mandatory
-	 */
 	else
 		mors_ops.wake_tx_queue = ieee80211_handle_wake_tx_queue;
+#elif KERNEL_VERSION(5, 9, 0) <= MAC80211_VERSION_CODE
+	if (enable_airtime_fairness)
+		mors_ops.wake_tx_queue = morse_mac_ops_wake_tx_queue;
 #endif

 	/* User disabled HW-crypto - fallback to software crypto */
--- morse_driver-rel_1_12_3_2024_May_23.orig/skbq.c	2025-01-27 05:22:10.812492484 +0000
+++ morse_driver-rel_1_12_3_2024_May_23.orig/skbq.c	2025-01-27 05:22:40.224603983 +0000
@@ -1177,7 +1177,7 @@
 		txi->status.ampdu_ack_len = txi->flags & IEEE80211_TX_STAT_ACK ? 1 : 0;
 	}

-	ieee80211_tx_status(mors->hw, skb);
+	ieee80211_tx_status_ni(mors->hw, skb);
 }
 #endif /* CONFIG_MORSE_RC */

--- morse_driver-rel_1_12_3_2024_May_23.orig/debug.h	2025-01-27 05:29:42.462559598 +0000
+++ morse_driver-rel_1_12_3_2024_May_23.orig/debug.h	2025-01-27 05:30:11.733665649 +0000
@@ -165,7 +165,7 @@
  *
  * @returns	True if output would be generated and false otherwise.
  */
-bool morse_log_is_enabled(u32 id, u8 level);
+bool morse_log_is_enabled(enum morse_feature_id id, u8 level);

 /**
  * Set the default logging level for all features.
--- morse_driver-rel_1_12_3_2024_May_23.orig/beacon.c	2025-01-27 05:32:13.962284195 +0000
+++ morse_driver-rel_1_12_3_2024_May_23.orig/beacon.c	2025-01-27 05:32:27.430793114 +0000
@@ -391,7 +391,7 @@
 		}

 		/* Just say we transmitted it */
-		ieee80211_tx_status(mors->hw, beacon);
+		ieee80211_tx_status_ni(mors->hw, beacon);
 		beacon = skb2;
 	}

--- morse_driver-rel_1_12_3_2024_May_23.orig/firmware.h	2025-01-27 05:34:50.929243876 +0000
+++ morse_driver-rel_1_12_3_2024_May_23.orig/firmware.h	2025-01-27 05:35:30.169736504 +0000
@@ -144,7 +144,7 @@
 	u8 ext_host_table_data_tlvs[];
 } __packed;

-int morse_firmware_init(struct morse *mors, uint test_mode);
+int morse_firmware_init(struct morse *mors, enum morse_config_test_mode test_mode);

 /**
  * @brief Perform non-destructive-reset of the chip,
--- morse_driver-rel_1_12_3_2024_May_23.orig/morse.h	2025-01-27 05:47:56.937066119 +0000
+++ morse_driver-rel_1_12_3_2024_May_23.orig/morse.h	2025-01-27 05:49:35.519799855 +0000
@@ -29,6 +29,30 @@
 #if KERNEL_VERSION(4, 9, 81) < LINUX_VERSION_CODE
 #include <linux/nospec.h>
 #endif
+
+/**
+ * enum morse_config_test_mode - test mode
+ * @MORSE_CONFIG_TEST_MODE_DISABLED: normal operation
+ * @MORSE_CONFIG_TEST_MODE_DOWNLOAD_ONLY: download only (no verification)
+ * @MORSE_CONFIG_TEST_MODE_DOWNLOAD_AND_GET_HOST_TBL_PTR: download and get host ptr only
+ * @MORSE_CONFIG_TEST_MODE_GET_HOST_TBL_PTR_ONLY: get host ptr only (no download or verification)
+ * @MORSE_CONFIG_TEST_MODE_RESET: reset only (no download or verification)
+ * @MORSE_CONFIG_TEST_MODE_BUS: write/read block via the bus
+ * @MORSE_CONFIG_TEST_MODE_BUS_PROFILE: measure time to perform bus operations
+ */
+enum morse_config_test_mode {
+	MORSE_CONFIG_TEST_MODE_DISABLED,
+	MORSE_CONFIG_TEST_MODE_DOWNLOAD_ONLY,
+	MORSE_CONFIG_TEST_MODE_DOWNLOAD_AND_GET_HOST_TBL_PTR,
+	MORSE_CONFIG_TEST_MODE_GET_HOST_TBL_PTR_ONLY,
+	MORSE_CONFIG_TEST_MODE_RESET,
+	MORSE_CONFIG_TEST_MODE_BUS,
+	MORSE_CONFIG_TEST_MODE_BUS_PROFILE,
+
+	/* Add more test modes before this line */
+	MORSE_CONFIG_TEST_MODE_INVALID,
+};
+
 #include "compat.h"
 #include "hw.h"
 #include "skbq.h"
@@ -121,29 +145,6 @@

 #define BPS_TO_KBPS(x) ((x) / 1000)

-/**
- * enum morse_config_test_mode - test mode
- * @MORSE_CONFIG_TEST_MODE_DISABLED: normal operation
- * @MORSE_CONFIG_TEST_MODE_DOWNLOAD_ONLY: download only (no verification)
- * @MORSE_CONFIG_TEST_MODE_DOWNLOAD_AND_GET_HOST_TBL_PTR: download and get host ptr only
- * @MORSE_CONFIG_TEST_MODE_GET_HOST_TBL_PTR_ONLY: get host ptr only (no download or verification)
- * @MORSE_CONFIG_TEST_MODE_RESET: reset only (no download or verification)
- * @MORSE_CONFIG_TEST_MODE_BUS: write/read block via the bus
- * @MORSE_CONFIG_TEST_MODE_BUS_PROFILE: measure time to perform bus operations
- */
-enum morse_config_test_mode {
-	MORSE_CONFIG_TEST_MODE_DISABLED,
-	MORSE_CONFIG_TEST_MODE_DOWNLOAD_ONLY,
-	MORSE_CONFIG_TEST_MODE_DOWNLOAD_AND_GET_HOST_TBL_PTR,
-	MORSE_CONFIG_TEST_MODE_GET_HOST_TBL_PTR_ONLY,
-	MORSE_CONFIG_TEST_MODE_RESET,
-	MORSE_CONFIG_TEST_MODE_BUS,
-	MORSE_CONFIG_TEST_MODE_BUS_PROFILE,
-
-	/* Add more test modes before this line */
-	MORSE_CONFIG_TEST_MODE_INVALID,
-};
-
 struct morse_buff;
 struct morse_bus_ops;
